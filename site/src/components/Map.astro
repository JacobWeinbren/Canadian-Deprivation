<div id="map" class="w-screen h-screen"></div>
<div id="geocoder" class="geocoder fixed top-4 left-4 z-10"></div>

<div
	class="sm:w-[500px] text-sm w-full flex flex-col gap-2 absolute bottom-10 rounded-md z-10 bg-white p-4 left-1/2 transform -translate-x-1/2"
>
	<div>
		<p class="text-md font-semibold" id="title">Deprivation Index 2021</p>
		<p>Canada</p>
	</div>

	<div>
		<select id="variable-select" class="p-2 rounded border">
			<option value="A">Residential instability</option>
			<option value="B">Economic dependency</option>
			<option value="C">Ethno-cultural composition</option>
			<option value="D" selected>Situational vulnerability</option>
		</select>
	</div>

	<div>
		<div id="gradient" class="w-full h-4 rounded"></div>
		<div class="flex justify-between">
			<span id="min"></span>
			<span id="max"></span>
		</div>
	</div>

	<div id="meta">Higher quintiles mean more deprived, lower mean less.</div>

	<div id="hover">Hover over a point to see its value.</div>
</div>

<script>
	import { GeoJsonLayer } from "@deck.gl/layers";
	import { MapboxOverlay } from "@deck.gl/mapbox";
	import { MVTLayer } from "@deck.gl/geo-layers";
	import { MaskExtension } from "@deck.gl/extensions";
	import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";
	import mapboxgl from "mapbox-gl";
	import chroma from "chroma-js";

	const MAPBOX_TOKEN = import.meta.env.PUBLIC_MAPBOX_TOKEN;
	const variableSelect = document.getElementById("variable-select");
	let selectedVariable = "D";

	const colorStops = {
		A: [-1.02, -0.66, -0.28, 0.31, 1.54],
		B: [-0.9, -0.66, -0.35, 0.24, 1.54],
		C: [-1.1, -0.53, -0.1, 0.36, 1.16],
		D: [-0.89, -0.46, -0.14, 0.21, 0.84],
	};

	const colors = ["#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020"];

	const colorScale = chroma.scale(colors).domain([-2, -1, 0, 1, 2]);

	const stops = colorScale.colors(5);
	const gradientStyle = `linear-gradient(to right, ${stops.join(", ")})`;
	document.getElementById("gradient").style.background = gradientStyle;

	const map = new mapboxgl.Map({
		container: "map",
		center: [-79.4, 43.7],
		zoom: 9,
		minZoom: 6,
		maxZoom: 16,
		style: "mapbox://styles/mapbox/dark-v11?optimize=true",
		accessToken: MAPBOX_TOKEN,
		antialias: true,
		projection: { name: "mercator" },
	});

	const deckOverlay = new MapboxOverlay({
		interleaved: true,
		layers: [],
	});

	map.addControl(deckOverlay);

	function updateMinMax() {
		const selectedStops = colorStops[selectedVariable];
		const min = selectedStops[0];
		const max = selectedStops[selectedStops.length - 1];

		document.getElementById("min").textContent =
			`${min.toFixed(2)} (least deprived)`;
		document.getElementById("max").textContent =
			`${max.toFixed(2)} (most deprived)`;
	}

	updateMinMax();

	map.on("load", () => {
		const firstLabelLayerId = map
			.getStyle()
			.layers.find((layer) => layer.type === "symbol").id;

		function createBackgroundLayer() {
			return new MVTLayer({
				id: "background-layer",
				data: "https://map.jacobweinbren.workers.dev/canada-deprivation-areas/{z}/{x}/{y}.mvt",
				getFillColor: () => [0, 0, 0, 0],
				pickable: true,
				onHover: (info) => {
					const infoDiv = document.querySelector("#meta");
					if (info.object) {
						const feature = info.object;
						const quintile =
							feature.properties[`${selectedVariable}_Q`].toFixed(
								0
							);
						infoDiv.innerHTML = `This area is in quintile <span class="font-semibold">${quintile}</span>, out of 5.`;
					} else {
						infoDiv.innerHTML =
							"Hover over a point to see its value.";
					}
				},
			});
		}

		function createForegroundLayer() {
			const colorScale = chroma
				.scale(colors)
				.domain(colorStops[selectedVariable]);

			return new MVTLayer({
				id: "foreground-layer",
				data: "https://map.jacobweinbren.workers.dev/canada-deprivation-buildings/{z}/{x}/{y}.mvt",
				getFillColor: (d) => {
					const color = colorScale(
						d.properties[selectedVariable]
					).rgb();
					return [color[0], color[1], color[2], 255] as [
						number,
						number,
						number,
						number,
					];
				},
				getLineColor: (d) => {
					const color = colorScale(
						d.properties[selectedVariable]
					).rgb();
					return [color[0], color[1], color[2], 255] as [
						number,
						number,
						number,
						number,
					];
				},
				lineWidthMinPixels: 1,
				updateTriggers: {
					getFillColor: [selectedVariable],
					getLineColor: [selectedVariable],
				},
				beforeId: firstLabelLayerId,
			});
		}

		function updateMap() {
			const backgroundLayer = createBackgroundLayer();
			const foregroundLayer = createForegroundLayer();

			deckOverlay.setProps({
				layers: [backgroundLayer, foregroundLayer],
			});
		}

		updateMap();

		variableSelect.addEventListener("change", () => {
			selectedVariable = (variableSelect as HTMLSelectElement).value;
			updateMinMax();
			updateMap();
		});

		const geocoder = new MapboxGeocoder({
			accessToken: MAPBOX_TOKEN,
			mapboxgl: mapboxgl,
			marker: false,
		});

		document.getElementById("geocoder").appendChild(geocoder.onAdd(map));
	});
</script>
