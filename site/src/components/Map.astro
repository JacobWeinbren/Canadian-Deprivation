<div id="map" class="w-screen h-screen"></div>
<div id="geocoder" class="geocoder fixed top-4 left-4 z-10"></div>

<div
	class="sm:w-[500px] text-sm w-full flex flex-col gap-2 absolute bottom-10 rounded-md z-10 bg-white p-4 left-1/2 transform -translate-x-1/2"
>
	<div>
		<p class="text-md font-semibold" id="title">Deprivation Index 2021</p>
		<p>Canada</p>
	</div>

	<div>
		<select id="variable-select" class="p-2 rounded border">
			<option value="A">Residential instability</option>
			<option value="B">Economic dependency</option>
			<option value="C">Ethno-cultural composition</option>
			<option value="D" selected>Situational vulnerability</option>
		</select>
	</div>

	<div>
		<div id="gradient" class="w-full h-4 rounded"></div>
		<div class="flex justify-between">
			<span id="min"></span>
			<span id="max"></span>
		</div>
	</div>

	<div id="meta">Higher quintiles mean more deprived, lower mean less.</div>

	<div id="hover">Hover over a point to see its value.</div>
</div>

<script>
	import mapboxgl from "mapbox-gl";
	import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";
	import chroma from "chroma-js";

	const MAPBOX_TOKEN = import.meta.env.PUBLIC_MAPBOX_TOKEN;
	const variableSelect = document.getElementById("variable-select");
	let selectedVariable = "D";

	// =MEDIAN(FILTER(E$2:E$55828, D$2:D$55828=1))
	// Where E is quntile and D is value
	const colorStops = {
		A: [-1.02, -0.66, -0.28, 0.31, 1.54],
		B: [-0.9, -0.66, -0.35, 0.24, 1.54],
		C: [-1.1, -0.53, -0.1, 0.36, 1.16],
		D: [-0.89, -0.46, -0.14, 0.21, 0.84],
	};

	const domainStart = -2;
	const domainEnd = 2;
	const colorScale = chroma
		.scale(["#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020"])
		.domain([domainStart, -1, 0, 1, domainEnd]);

	const numberOfStops = 5;
	const stepSize = (domainEnd - domainStart) / (numberOfStops - 1);
	const stops = Array.from({ length: numberOfStops }, (_, i) =>
		colorScale(domainStart + i * stepSize).hex()
	);
	const gradientStyle = `linear-gradient(to right, ${stops.join(", ")})`;
	document.getElementById("gradient").style.background = gradientStyle;

	const map = new mapboxgl.Map({
		container: "map",
		center: [-79.4, 43.7],
		zoom: 9,
		minZoom: 0,
		maxZoom: 15,
		style: "mapbox://styles/mapbox/dark-v11?optimize=true",
		accessToken: MAPBOX_TOKEN,
		antialias: true,
		projection: { name: "mercator" },
	});

	function updateMinMax() {
		const selectedStops = colorStops[selectedVariable];
		const min = selectedStops[0];
		const max = selectedStops[selectedStops.length - 1];

		document.getElementById("min").textContent =
			`${min.toFixed(2)} (least deprived)`;
		document.getElementById("max").textContent =
			`${max.toFixed(2)} (most deprived)`;
	}

	updateMinMax();

	function getColorStops() {
		const selectedStops = colorStops[selectedVariable];

		return [
			selectedStops[0],
			"#0571b0",
			selectedStops[1],
			"#92c5de",
			selectedStops[2],
			"#f7f7f7",
			selectedStops[3],
			"#f4a582",
			selectedStops[4],
			"#ca0020",
		];
	}

	map.on("load", () => {
		const firstLabelLayerId = map
			.getStyle()
			.layers.find((layer) => layer.type === "symbol").id;

		map.addSource("background", {
			type: "vector",
			tiles: [
				"https://map.jacobweinbren.workers.dev/canada-background/{z}/{x}/{y}.mvt",
			],
			minzoom: 0,
			maxzoom: 15,
		});

		map.addLayer(
			{
				id: "background-layer",
				type: "fill",
				source: "background",
				"source-layer": "maplayer",
				paint: {
					"fill-color": "rgba(0, 0, 0, 0)",
				},
			},
			firstLabelLayerId
		);

		map.addSource("foreground", {
			type: "vector",
			tiles: [
				"https://map.jacobweinbren.workers.dev/canada-foreground/{z}/{x}/{y}.mvt",
			],
			minzoom: 0,
			maxzoom: 15,
		});

		map.addLayer(
			{
				id: "buildings-layer",
				type: "fill",
				source: "foreground",
				"source-layer": "maplayer",
				paint: {
					"fill-color": [
						"case",
						["!=", ["get", selectedVariable], null],
						[
							"interpolate",
							["linear"],
							["get", selectedVariable],
							...getColorStops(),
						],
						"rgba(0, 0, 0, 0)",
					],
					"fill-opacity": [
						"case",
						["!=", ["get", selectedVariable], null],
						1,
						0,
					],
				},
			},
			firstLabelLayerId
		);

		function updateMap() {
			map.setPaintProperty("buildings-layer", "fill-color", [
				"interpolate",
				["linear"],
				["get", selectedVariable],
				...getColorStops(),
			]);
		}

		variableSelect.addEventListener("change", () => {
			selectedVariable = (variableSelect as HTMLSelectElement).value;
			updateMinMax();
			updateMap();
		});

		map.on("mousemove", "background-layer", (e) => {
			const infoDiv = document.querySelector("#meta");
			if (e.features.length === 0 || !infoDiv) return;
			const feature = e.features[0];
			const quintile =
				feature.properties[`${selectedVariable}_Q`].toFixed(0);
			infoDiv.innerHTML = `This area is in quintile <span class="font-semibold">${quintile}</span>, out of 5.`;
		});

		const geocoder = new MapboxGeocoder({
			accessToken: MAPBOX_TOKEN,
			mapboxgl: mapboxgl,
		});
		document.getElementById("geocoder").appendChild(geocoder.onAdd(map));

		map.addControl(new mapboxgl.NavigationControl());
	});
</script>
